task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}


buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

//apply plugin: 'java' // or 'groovy'. Must be explicitly applied
//apply plugin: 'com.github.johnrengelman.shadow'


//the following section is executed only on subprojects, ie. everything except the root project folder
subprojects {


    //compiles java and scala source go to .class files under /build/classes
    apply plugin: 'scala'
    apply plugin: 'java'


    //send all jars to the root of the project under build/
    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/")
    }


    repositories {
        mavenCentral()
        
        maven {
            url "https://oss.sonatype.org/content/repositories/public"
        }
        
        maven {
            url "http://packages.confluent.io/maven"
        }

        flatDir {
            dirs '../../deps'
        }

        dependencies {
            compile 'org.slf4j:slf4j-api:1.7.7'
            compile 'org.slf4j:slf4j-log4j12:1.7.7'
        }
    }

}



project("common") {
    
    version = '1.0'

    jar.archiveName = "elodina-common-${version}.jar"

    dependencies {
        compile 'org.scala-lang:scala-library:2.11.8'
        compile 'org.apache.kafka:kafka-clients:0.10.0.0'
        compile 'com.github.scopt:scopt_2.11:3.3.0'

        
        //compile "org.apache.thrift:libthrift:0.9.3"
        
        //cmd line option parser

    }

    jar {
        doFirst {
            from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
    }

}
project("oneusagov/topology") {
    dependencies {
        compile 'org.scala-lang:scala-library:2.11.8'
    }
}

project("oneusagov/streamconsumer") {

    
    version = '1.0'
    jar.archiveName = "one-usa-gov_DO_NOT_USE.jar"

    dependencies {
        compile (project(':common')) {
            exclude group: 'org.slf4j'
        }

        compile 'org.scala-lang:scala-library:2.11.8'
        compile 'com.typesafe:ssl-config-akka_2.11:0.1.2'
        compile 'com.typesafe.akka:akka-http-core-experimental_2.11:2.0.4'
        compile 'com.typesafe.akka:akka-stream-experimental_2.11:2.0.4'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.7.4'

    }

    jar {
        doFirst {
            from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
        manifest.attributes("Main-Class": "net.elodina.examples.oneusagov.stream.StreamConsumerMain")
    }

    task run(type:JavaExec) {
        main = 'net.elodina.examples.oneusagov.stream.StreamConsumerMain'
        classpath = sourceSets.main.runtimeClasspath
        systemProperty "log4j.configuration", "file:../../config/one-usa-gov.stream-consumer.log4j.properties"
        args "../../config/one-usa-gov.stream-consumer.properties"
    }

    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        baseName = "one-usa-gov-stream-consumer"
        version="1.0"
        mergeServiceFiles('reference.conf')
    }


}



project("tools/kafkalistener") {


    version = '1.0'
    jar.archiveName = "kafka-listener-${version}.jar"

    dependencies {
        compile (project(':common')) {
            exclude group: 'org.slf4j'
        }

        compile 'org.scala-lang:scala-library:2.11.8'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.7.4'
        compile 'org.apache.kafka:kafka-clients:0.9.0.0'

    }


    jar {
        doFirst {
            from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
        manifest.attributes("Main-Class": "net.elodina.tools.kafka.listener.KafkaListenerMain")
    }

    task run(type:JavaExec) {
        main = 'net.elodina.tools.kafka.listener.KafkaListenerMain'
        classpath = sourceSets.main.runtimeClasspath
        systemProperty "log4j.configuration", "file:../../config/kafka-listener.log4j.properties"
        args "../../config/kafka-listener.properties"
    }


}




